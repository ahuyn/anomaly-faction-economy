local level_multipliers = {
	["jupiter"]                 = -0.1,
	["l09_deadcity"]            = -0.05,
	["l10_limansk"]             = -0.15,
	["l10_red_forest"]          = -0,15,
	["l11_hospital"]            = -0.2,
	["l11_pripyat"]             = -0.2,
	["l12_stancia"]             = -0.4,
	["l12_stancia_2"]           = -0.4,
	["l13_generators"]			= -0.4,
	["pripyat"]					= -0.2,
	["zaton"]					= -0.1
}

GetCost = utils_item.get_item_cost
get_trader_community = faction_stocks.get_trader_community

multiplier = 1
supply_level = nil

-- ARTI surplus/deficit
local ini_deals = ini_file("trade_deals\\importer.ltx")
local kind_to_category = {}
local deals_by_trader = {}
local deals = {}
current_trader = nil

local use_north_level_mul = true
local use_goodwill_mul = true
local use_ignore_faction_goodwill = false
local use_reputation_mul = true
local goodwill_mul = 2
local rep_mul = 2
local gt = game.translate_string


function utils_item.get_item_cost(obj, profile)
	--printf("# <HARU> Item: [%s]", obj:section())
    --printf("# <HARU> Mode: [%s]", profile.mode)
	local deal_mult = 1
	if deals[current_trader] then
		local kind = SYS_GetParam(0, obj:section(), "kind")
		if deals[current_trader].category[kind_to_category[kind]] then
			deal_mult = deals[current_trader].multiplier
		end
	end
    return profile.mode == 1 and GetCost(obj, profile) * clamp(multiplier, 0, 2) * deal_mult or GetCost(obj, profile) * clamp(2 - multiplier, 0.65, 5) * deal_mult
end
--[[
	~ <HARU> Goodwill: [3000]
	~ <HARU> Reputation: [4000]
]]

function ActorMenu_on_trade_started()
	local actor = db.actor
    local trader_npc = mob_trade.GetTalkingNpc()
    local actor_faction = str_explode(character_community(actor), "_")[2]
    local trader_faction = get_trader_community(trader_npc, actor_faction)
	local goodwill = relation_registry.community_goodwill(trader_faction, 0)
	current_trader = trader_npc:name()
	local current_level = level.name()
	local community_relation = relation_registry.community_relation(actor_faction, trader_faction)
	local reputation = actor:character_reputation()
    printf("- <HARU> Talking NPC: [%s]", trader_npc:section())
	printf("- <HARU> Actor community: [%s]", actor_faction)
	printf("~ <HARU> Squad community: [%s]", trader_faction)
	printf("~ <HARU> Goodwill: [%s]", goodwill)
	printf("~ <HARU> Reputation: [%s]", reputation)
	printf("~ <HARU> Community Relation [%s]", community_relation)
	multiplier = 1 -- reset the multiplier
	multiplier = use_faction_discounts and (multiplier + (community_relation * 0.000075)) - 0.15 or multiplier - 0.15
    if (actor_faction == trader_faction and use_goodwill_mul) or (use_ignore_faction_goodwill and use_goodwill_mul) then
        multiplier = multiplier * (1 + (goodwill * 0.0001 * goodwill_mul))
    end
	multiplier = use_reputation_mul and multiplier * (1 + (reputation * 0.00005 * rep_mul)) or multiplier
	multiplier = use_north_level_mul and multiplier * (1 + (level_multipliers[current_level] or 0)) or multiplier
	printf("~ <HARU> Multiplier: [%s]", multiplier)
	if trader_autoinject.get_trader_type(trader_npc) == trader_autoinject.SUPPLIER then
		supply_level = trader_autoinject.supply_level(trader_npc, true) or 1
	else
		supply_level = nil
	end
end


function on_option_change()
	use_faction_discounts = faction_economy_mcm.get_config("use_faction_discounts")
	use_goodwill_mul = faction_economy_mcm.get_config("use_goodwill_mul")
	use_ignore_faction_goodwill = faction_economy_mcm.get_config("use_ignore_faction_goodwill")
	use_reputation_mul = faction_economy_mcm.get_config("use_reputation_mul")
	use_north_level_mul = faction_economy_mcm.get_config("use_north_level_mul")
	goodwill_mul = faction_economy_mcm.get_config("goodwill_mul")
	rep_mul = faction_economy_mcm.get_config("rep_mul")
end


function pick_deal(npc_name)	
	local deal_to_activate = nil
	-- pick a deal for this npc
	local deal_copy = {}
	copy_table(deals_by_trader[npc_name], deal_copy)
	if #deals_by_trader[npc_name] == 1 then 
		return deals_by_trader[npc_name][1] 
	else
		shuffle_table(deal_copy)
		for k,v in deal_copy do
			local chance = SYS_GetParam(2, v, "chance") or 0.5
			if math.random() <= chance then
				return v
			end
		end
	end
	return deal_copy[math.random(#deal_copy)]
end

-- roll a new deal
-- return the duration to keep the deal for in hours
-- new deals roll randomly based on trader timeout
function activate_deal(npc_name)
	if not deals_by_trader[npc_name] then return 0 end

	-- pick a deal for this npc
	local deal_to_activate = pick_deal(npc_name)
	
	-- store deal details
	local deal_data = {}
	deal_data.category = {}
	local categories = str_explode(SYS_GetParam(0, deal_to_activate, "category"), ",")
	for k,v in pairs(categories) do
		deal_data.category[v] = true
	end
	deal_data.multiplier = SYS_GetParam(2, deal_to_activate, "multiplier")
	deal_data.timeout = game.get_game_time()
	deals[npc_name] = deal_data
	local duration = SYS_GetParam(2, duration, "multiplier") or 3
	duration = duration * 3600
	
	return duration
end

function deactivate_deal(npc_name)
	deals[npc_name] = nil
end

function save_state(mdata)
	mdata.deals = deals
end
function load_state(mdata)
	deals = mdata.deals or {}
end



function on_game_start()
    RegisterScriptCallback("ActorMenu_on_trade_started", ActorMenu_on_trade_started)
	RegisterScriptCallback("on_option_change", on_option_change)
    on_option_change()	
	RegisterScriptCallback("load_state",load_state)
	RegisterScriptCallback("save_state",save_state)
end