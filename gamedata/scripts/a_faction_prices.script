local level_multipliers = {
	["jupiter"]                 = -0.1,
	["l09_deadcity"]            = -0.05,
	["l10_limansk"]             = -0.15,
	["l10_red_forest"]          = -0,15,
	["l11_hospital"]            = -0.2,
	["l11_pripyat"]             = -0.2,
	["l12_stancia"]             = -0.4,
	["l12_stancia_2"]           = -0.4,
	["l13_generators"]			= -0.4,
	["pripyat"]					= -0.2,
	["zaton"]					= -0.1
}

GetCost = utils_item.get_item_cost
get_trader_community = faction_stocks.get_trader_community

local multiplier = 1
local use_north_level_mul = true
local use_goodwill_mul = true
local use_ignore_faction_goodwill = false
local use_reputation_mul = true
local goodwill_mul = 2
local rep_mul = 2
local gt = game.translate_string

function utils_item.get_item_cost(obj, profile)
	--printf("# <HARU> Item: [%s]", obj:section())
    --printf("# <HARU> Mode: [%s]", profile.mode)
    return profile.mode == 1 and GetCost(obj, profile) * clamp(multiplier, 0, 2) or GetCost(obj, profile) * clamp(2 - multiplier, 0.65, 5)
end
--[[
	~ <HARU> Goodwill: [3000]
	~ <HARU> Reputation: [4000]
]]

GUI = nil

function ActorMenu_on_trade_started()
	local actor = db.actor
    local trader_npc = mob_trade.GetTalkingNpc()
    local actor_faction = str_explode(character_community(actor), "_")[2]
    local trader_faction = get_trader_community(trader_npc, actor_faction)
	local goodwill = relation_registry.community_goodwill(trader_faction, 0)
	local current_level = level.name()
	local community_relation = relation_registry.community_relation(actor_faction, trader_faction)
	local reputation = actor:character_reputation()
    printf("- <HARU> Talking NPC: [%s]", trader_npc:section())
	printf("- <HARU> Actor community: [%s]", actor_faction)
	printf("~ <HARU> Squad community: [%s]", trader_faction)
	printf("~ <HARU> Goodwill: [%s]", goodwill)
	printf("~ <HARU> Reputation: [%s]", reputation)
	printf("~ <HARU> Community Relation [%s]", community_relation)
	multiplier = 1 -- reset the multiplier
	multiplier = use_faction_discounts and (multiplier + (community_relation * 0.0001)) - 0.1 or multiplier - 0.1
    if (actor_faction == trader_faction and use_goodwill_mul) or (use_ignore_faction_goodwill and use_goodwill_mul) then
        multiplier = multiplier * (1 + (goodwill * 0.0001 * goodwill_mul))
    end
	multiplier = use_reputation_mul and multiplier * (1 + (reputation * 0.00005 * rep_mul)) or multiplier
	multiplier = use_north_level_mul and multiplier * (1 + (level_multipliers[current_level] or 0)) or multiplier
	printf("~ <HARU> Multiplier: [%s]", multiplier)
	if trader_autoinject.get_trader_type(trader_npc) == trader_autoinject.SUPPLIER then
		local supply_level = trader_autoinject.supply_level(trader_npc, true) or 1
		CreateTimeEvent("haruka_show_ui_trade", "haruka_show_ui_trade", 0.1, start, supply_level, multiplier)
	end
end

function start(supply_level, multiplier)
	if (not GUI) then
		GUI = UITradeStats()
		get_hud():AddDialogToRender(GUI)
	end
	GUI:ShowTradeStats(supply_level, multiplier)
	return true
end

function close()
	if (not GUI) then 
		return 
	end
	get_hud():RemoveDialogToRender(GUI)
	GUI:Close()
	GUI = nil
end

class "UITradeStats" (CUIScriptWnd)

function UITradeStats:__init() super()
	self:InitControls()
end

function UITradeStats:__finalize()
end

function UITradeStats:InitControls()
	self:SetAutoDelete(true)
	self.xml = CScriptXmlInit()
	local xml = self.xml
	xml:ParseFile("ui_haruka_trade_stats.xml")
	self.trader_dialog = xml:InitStatic("trader", self)
	self.player_dialog = xml:InitStatic("player", self)
	self.trader_supply_level = xml:InitTextWnd("trader:level", self.trader_dialog)
	self.trader_multiplier = xml:InitTextWnd("trader:multiplier", self.trader_dialog)
	self.player_multiplier = xml:InitTextWnd("player:multiplier", self.player_dialog)
end

function UITradeStats:ShowTradeStats(supply_level, multiplier)
	self.trader_supply_level:SetText(gt("st_haruka_sulpplies_level").. " " .. supply_level)
	self.trader_multiplier:SetText(gt("st_haruka_multiplier") .. " " .. round_idp(clamp(2 - multiplier, 0.65, 5), 2))
	self.player_multiplier:SetText(gt("st_haruka_multiplier") .. " " .. round_idp(clamp(multiplier, 0, 2), 2))
	self.trader_dialog:Show(true)
	self.player_dialog:Show(true)
end

function UITradeStats:Close()
	self.trader_dialog:Show(false)
	self.player_dialog:Show(false)
end

function on_option_change()
	use_faction_discounts = faction_economy_mcm.get_config("use_faction_discounts")
	use_goodwill_mul = faction_economy_mcm.get_config("use_goodwill_mul")
	use_ignore_faction_goodwill = faction_economy_mcm.get_config("use_ignore_faction_goodwill")
	use_reputation_mul = faction_economy_mcm.get_config("use_reputation_mul")
	use_north_level_mul = faction_economy_mcm.get_config("use_north_level_mul")
	goodwill_mul = faction_economy_mcm.get_config("goodwill_mul")
	rep_mul = faction_economy_mcm.get_config("rep_mul")
end

function on_game_start()
    RegisterScriptCallback("ActorMenu_on_trade_started", ActorMenu_on_trade_started)
	RegisterScriptCallback("ActorMenu_on_trade_closed", close)
	RegisterScriptCallback("on_option_change", on_option_change)
    on_option_change()
end