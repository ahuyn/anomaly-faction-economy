local GetAmmo = utils_item.get_ammo
local math_random = math.random

function spawn_special(supply_level)
    return clamp(math_random(0, 2), 0, 2) + math_random(supply_level)
end

function spawn_normal(supply_level)
    return clamp(math_random(0, 6), 2, 4) + (math_random(supply_level) * 2)
end

function custom_ammo_spawn(npc)
    if trader_autoinject.get_trader_type(npc) ~= trader_autoinject.SUPPLIER then return end
    local supply_level = trader_autoinject.supply_level(npc, true) or 0
    local to_spawn = {}

    npc:iterate_inventory(function(owner, item)
        if IsWeapon(item) and (not IsItem("fake_ammo_wpn", sec)) then
            local ammo_table = GetAmmo(item:section(), item:id(), false)
            --printf(utils_data.print_table(ammo_table, "ammo_class", true))

            for k, ammo in pairs(ammo_table) do
                if k % 3 == 1 then -- 1 - normal, 2 - bad, 0 - verybad
                    if not to_spawn[ammo] then
                        to_spawn[ammo] = k > 1 and spawn_special(supply_level) or spawn_normal(supply_level)
                    else
                        to_spawn[ammo] = to_spawn[ammo] + (k > 1 and clamp(math_random(-2, 1), 0, 1) or math_random(1, 2))
                    end
                end
            end
        elseif IsAmmo(item) then
            alife_release(item)
        end
    end, npc)

    printf(utils_data.print_table(to_spawn, "Spawned Ammo", true))
    trader_autoinject.spawn_items(npc, to_spawn)
end

TraderAuto = trader_autoinject.update

function trader_autoinject.update(npc)
    TraderAuto(npc)
    custom_ammo_spawn(npc)
end